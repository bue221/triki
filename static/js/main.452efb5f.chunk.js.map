{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","className","Board","squares","renderSquare","i","Game","status","useState","xisNext","setXisNext","stepNum","setStepNum","Array","fill","history","setHistory","current","win","winner","moves","map","step","move","desc","key","jumpTo","history1","slice","length","concat","lines","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAUeA,EARA,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,MAAMC,EAAW,EAAXA,QACnB,OACI,4BAAQA,QAASA,EAASC,UAAU,UAC/BF,ICuBEG,EAzBD,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,QAAQH,EAAW,EAAXA,QACVI,EAAe,SAACC,GAAD,OACb,kBAAC,EAAD,CAAQN,MAAOI,EAAQE,GAAIL,QAAS,kBAAIA,EAAQK,OAExD,OACQ,6BACQ,yBAAKJ,UAAU,cACNG,EAAa,GACbA,EAAa,GACbA,EAAa,IAEtB,yBAAKH,UAAU,cACNG,EAAa,GACbA,EAAa,GACbA,EAAa,IAEtB,yBAAKH,UAAU,cACNG,EAAa,GACbA,EAAa,GACbA,EAAa,MC6C/BE,EA9DF,WAAK,IAyCNC,EAzCK,EAEoBC,oBAAS,GAF7B,mBAEFC,EAFE,KAEOC,EAFP,OAGoBF,mBAAS,GAH7B,mBAGFG,EAHE,KAGOC,EAHP,OAIoBJ,mBAAS,CAC9B,CAACL,QAASU,MAAM,GAAGC,KAAK,SALvB,mBAIFC,EAJE,KAIOC,EAJP,KA4BHC,EAAUF,EAAQJ,GAClBO,EAAMC,EAAOF,EAAQd,SACrBiB,EAAQL,EAAQM,KAAI,SAACC,EAAMC,GACzB,IAAMC,EAAOD,EAAM,WAAWA,EAAM,oBAEpC,OACQ,wBAAIE,IAAKF,GACD,4BAAQvB,QAAS,YAb1B,SAACuB,GACRX,EAAWW,GACXb,EAAYa,EAAK,IAAK,GAWgBG,CAAOH,KACpBC,OAajC,OALQjB,EADLW,EACe,aAAaA,EAEd,mBAAoBT,EAAS,IAAI,KAI1C,yBAAKR,UAAU,QACP,yBAAKA,UAAU,cACP,kBAAC,EAAD,CAAOD,QAAS,SAACK,GAAD,OA3CxB,SAACA,GACT,IAAMsB,EAAWZ,EAAQa,MAAM,EAAEjB,EAAQ,GAEnCR,EADUwB,EAASA,EAASE,OAAO,GACjB1B,QAAQyB,QAEhCzB,EAAQE,GAAKI,EAAU,IAAK,IAE5BO,EAAWD,EAAQe,OAAO,CAClB3B,QAASA,KAEjBO,GAAYD,GACZG,EAAWe,EAASE,QAgCiB7B,CAAQK,IAAIF,QAASc,EAAQd,WAE1D,yBAAKF,UAAU,aACP,6BAAMM,GACN,4BAAKa,MAQ/BD,EAAS,SAAChB,GAYR,IAXA,IAAM4B,EAAQ,CACN,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAGL1B,EAAE,EAAGA,EAAE0B,EAAMF,OAAQxB,IAAK,CAAC,IAAD,cACV0B,EAAM1B,GADI,GACnB2B,EADmB,KACjBC,EADiB,KACfC,EADe,KAE1B,GAAG/B,EAAQ6B,IAAM7B,EAAQ6B,IAAM7B,EAAQ8B,IAAM9B,EAAQ8B,IAAM9B,EAAQ+B,GAC3D,OAAO/B,EAAQ6B,GAG/B,OAAO,MC5EAG,MANf,WACE,OACQ,kBAAC,EAAD,OCKUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.452efb5f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Square = ({value,onClick})=>{\n    return(\n        <button onClick={onClick} className='square'>\n            {value}\n        </button>\n    );\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square'\n\nconst Board = ({squares,onClick})=>{\n        const renderSquare = (i) =>(\n                <Square value={squares[i]} onClick={()=>onClick(i)} />\n                )\n        return(\n                <div>\n                        <div className=\"border-row\">\n                                {renderSquare(0)}\n                                {renderSquare(1)}\n                                {renderSquare(2)}\n                        </div>\n                        <div className=\"border-row\">\n                                {renderSquare(3)}\n                                {renderSquare(4)}\n                                {renderSquare(5)}\n                        </div>\n                        <div className=\"border-row\">\n                                {renderSquare(6)}\n                                {renderSquare(7)}\n                                {renderSquare(8)}\n                        </div>\n                </div>\n                );\n}\n\nexport default Board;\n","import React,{useState} from 'react';\n\n//components\nimport Board from './Board'\n\nconst Game = ()=>{\n\n        const [xisNext, setXisNext]= useState(true);\n        const [stepNum, setStepNum]= useState(0);\n        const [history, setHistory]= useState([\n                {squares: Array(9).fill(null)}\n        ]);\n\n\n        const onClick = (i) =>{\n                const history1 = history.slice(0,stepNum+1);\n                const current = history1[history1.length-1];\n                const squares = current.squares.slice(); \n\n                squares[i] = xisNext ? 'X': 'O';\n\n                setHistory(history.concat({\n                        squares: squares\n                }))\n                setXisNext(!xisNext);\n                setStepNum(history1.length)\n        }\n        const jumpTo = (move)=>{\n                setStepNum(move);\n                setXisNext((move%2)===0);\n\n        }\n\n        const current = history[stepNum];\n        const win = winner(current.squares);\n        const moves = history.map((step, move)=>{\n                const desc = move? 'Ir al # '+move :'Comenzar el juego';\n\n                return(\n                        <li key={move}>\n                                <button onClick={()=>{jumpTo(move)}}>\n                                        {desc}\n                                </button>\n                        </li>\n                        );\n        });\n        let status;\n\n        if(win){\n                status =  'Winner is '+win\n        }else{\n                status = 'Next Player is '+ (xisNext ?'X':'O')\n        }\n\n        return(\n                <div className=\"game\">\n                        <div className=\"game-board\">\n                                <Board onClick={(i)=>onClick(i)} squares={current.squares}  />\n                        </div>\n                        <div className=\"game-info\">\n                                <div>{status}</div>\n                                <ul>{moves}</ul>\n                        </div>\n                </div>\n                );\n}\n\nexport default Game;\n\nconst winner = (squares)=>{\n        const lines = [\n                [0,1,2],\n                [3,4,5],\n                [6,7,8],\n                [0,3,6],\n                [1,4,7],\n                [2,5,8],\n                [0,8,4],\n                [2,4,6]\n        ]\n\n        for(let i=0; i<lines.length; i++ ){\n                const [a,b,c] = lines[i];\n                if(squares[a] && squares[a] == squares[b] && squares[b] == squares[c]){\n                        return squares[a];\n                }\n        }\n        return null;\n}\n\n","import React from 'react';\nimport './App.css';\n\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n          <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}